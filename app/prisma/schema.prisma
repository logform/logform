generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}



model Users {  
  id                String @id @map("_id") @default(uuid())
  name              String 
  email             String @unique
  emailVerified     DateTime?
  image             String?
  accounts          Accounts[] 
  password          String
  forms             Forms[]
  createdAt         DateTime @default(now())
  hasCompletedSetup Boolean  @default(false)
}


model Accounts {
  id                String @id @map("_id") @default(uuid())
  userId            String
  user              Users @relation(fields: [userId],references: [id])
  provider          String
  providerAccountId String
}


model VerificationToken{
  id                String @id @map("_id") @default(uuid())
  userId            String
  token             String @unique
  expires           DateTime
}

model Forms {
  id                      String @id @map("_id") @default(uuid())
  userId                  String
  user                    Users @relation(fields: [userId],references: [id])
  key                     String
  title                   String
  ogImage                 String
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
  shortTextFields         ShortTextsFields[] 
  longTextsFields         LongTextsFields[]
  MultipleChoiceFields    MultipleChoiceFields[]
}



model RefreshTokens{
  id                String @id @map("_id") @default(uuid())
  userId            String @unique
  token             String
  expires           DateTime
}



//Fields types

model ShortTextsFields {
  id                String @id @map("_id")
  index             Int
  formId            String
  form              Forms @relation(fields: [formId], references: [id])
  label             String
  required          Boolean
  maxCharacters     Int
}

model LongTextsFields {
  id                String @id @map("_id")
  index             Int
  formId            String
  form              Forms @relation(fields: [formId], references: [id])
  label             String
  required          Boolean
  maxCharacters     Int
}

model MultipleChoiceFields{
   id                String @id @map("_id")
  index             Int
  formId            String
  form              Forms @relation(fields: [formId], references: [id])
  label             String
  options           MultipleChoiceFieldsOptions[]
  required          Boolean
}

model MultipleChoiceFieldsOptions{
  id                   String @id @map("_id")
  index                Int
  value                String
  questionId            String
  question              MultipleChoiceFields @relation(fields: [questionId], references: [id])
}