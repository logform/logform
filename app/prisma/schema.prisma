generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Users {
  id                String        @id @default(uuid()) @map("_id")
  name              String
  email             String        @unique
  emailVerified     DateTime?
  image             String?
  accounts          Accounts[]
  password          String
  forms             Forms[]
  submissions       Submissions[]
  createdAt         DateTime      @default(now())
  hasCompletedSetup Boolean       @default(false)
}

model Accounts {
  id                String @id @default(uuid()) @map("_id")
  userId            String
  user              Users  @relation(fields: [userId], references: [id])
  provider          String
  providerAccountId String
}

model VerificationToken {
  id      String   @id @default(uuid()) @map("_id")
  userId  String
  token   String   @unique
  expires DateTime
}

model Forms {
  id                   String                 @id @default(uuid()) @map("_id")
  userId               String
  user                 Users                  @relation(fields: [userId], references: [id])
  key                  String                 @unique
  title                String
  ogImage              String?
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  shortTextFields      ShortTextsFields[]
  longTextsFields      LongTextsFields[]
  MultipleChoiceFields MultipleChoiceFields[]
  submissions          Submissions[]
}

model RefreshTokens {
  id      String   @id @default(uuid()) @map("_id")
  userId  String   @unique
  token   String
  expires DateTime
}

//Fields types

model ShortTextsFields {
  id            String                 @id @default(uuid()) @map("_id")
  index         Int
  formId        String
  form          Forms                  @relation(fields: [formId], references: [id])
  label         String
  required      Boolean
  maxCharacters Int?
  submissions   ShortTextSubmissions[]
}

model LongTextsFields {
  id            String                @id @default(uuid()) @map("_id")
  index         Int
  formId        String
  form          Forms                 @relation(fields: [formId], references: [id])
  label         String
  required      Boolean
  maxCharacters Int?
  submission    LongTextSubmissions[]
}

model MultipleChoiceFields {
  id String @id @default(uuid()) @map("_id")

  index      Int
  formId     String
  form       Forms                         @relation(fields: [formId], references: [id])
  label      String
  options    MultipleChoiceFieldsOptions[]
  required   Boolean
  submission MultipleChoiceSubmissions[]
}

model MultipleChoiceFieldsOptions {
  id         String               @id @default(uuid()) @map("_id")
  index      Int
  value      String
  questionId String
  question   MultipleChoiceFields @relation(fields: [questionId], references: [id])
}

// Submission Types

model Submissions {
  id                        String                      @id @default(uuid()) @map("_id")
  formId                    String
  form                      Forms                       @relation(fields: [formId], references: [id])
  userId                    String
  user                      Users                       @relation(fields: [userId], references: [id])
  createdAt                 DateTime                    @default(now())
  shortTextSubmissions      ShortTextSubmissions[]
  longTextSubmissions       LongTextSubmissions[]
  multipleChoiceSubmissions MultipleChoiceSubmissions[]
}

model ShortTextSubmissions {
  id           String           @id @default(uuid()) @map("_id")
  questionId   String
  question     ShortTextsFields @relation(fields: [questionId], references: [id])
  submissionId String
  submission   Submissions      @relation(fields: [submissionId], references: [id])
  createdAt    DateTime         @default(now())
  answer       String
}

model LongTextSubmissions {
  id           String          @id @default(uuid()) @map("_id")
  questionId   String
  question     LongTextsFields @relation(fields: [questionId], references: [id])
  submissionId String
  submission   Submissions     @relation(fields: [submissionId], references: [id])
  createdAt    DateTime        @default(now())
  answer       String
}

model MultipleChoiceSubmissions {
  id           String               @id @default(uuid()) @map("_id")
  questionId   String
  question     MultipleChoiceFields @relation(fields: [questionId], references: [id])
  submissionId String
  submission   Submissions          @relation(fields: [submissionId], references: [id])
  createdAt    DateTime             @default(now())
  answer       String[]
}
