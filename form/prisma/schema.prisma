generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Users {
  id                String        @id @default(uuid()) @map("_id")
  name              String
  email             String        @unique
  emailVerified     DateTime?
  image             String?
  accounts          Accounts[]
  password          String
  forms             Forms[]
  createdAt         DateTime      @default(now())
  hasCompletedSetup Boolean       @default(false)
}

model Accounts {
  id                String @id @default(uuid()) @map("_id")
  userId            String
  user              Users  @relation(fields: [userId], references: [id])
  provider          String
  providerAccountId String
}

model VerificationToken {
  id      String   @id @default(uuid()) @map("_id")
  userId  String
  token   String   @unique
  expires DateTime
}

model RefreshTokens {
  id      String   @id @default(uuid()) @map("_id")
  userId  String   @unique
  token   String
  expires DateTime
}

model Forms {
  id          String       @id @default(uuid()) @map("_id")
  userId      String
  user        Users        @relation(fields: [userId], references: [id])
  key         String       @unique
  title       String
  ogImage     String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  questions   Questions[]
   submissions Submissions[]
}

model Questions {
  id        String         @id @default(uuid()) @map("_id")
  index     Int
  label     String
  type      QuestionTypes
  required  Boolean
  formId    String
  form      Forms          @relation(fields: [formId], references: [id])
  options   Options[]
  shortText ShortText?
  longText  LongText?
  answers     SubmissionAnswers[]
}

model Options {
  id        String         @id @default(uuid()) @map("_id")
  index    Int
  value   String
  question  Questions      @relation(fields: [questionId], references: [id])
  questionId String
}

model ShortText {
  id           String       @id @default(uuid()) @map("_id")
  maxCharacters Int?
  question     Questions    @relation(fields: [questionId], references: [id])
  questionId   String @unique
}

model LongText {
  id           String       @id @default(uuid()) @map("_id")
  maxCharacters Int?
  question     Questions    @relation(fields: [questionId], references: [id])
  questionId   String @unique
}

enum QuestionTypes {
  short_text
  long_text
  multiple_choice
  email
  picture_choice
  file_upload
  yes_no
}




model Submissions {
  id           String    @id @default(uuid()) @map("_id")
  formId       String
  form         Forms     @relation(fields: [formId], references: [id])
  submittedAt  DateTime  @default(now())
  answers      SubmissionAnswers[]
}


model SubmissionAnswers {
  id            String    @id @default(uuid()) @map("_id")
  submissionId  String
  submission   Submissions @relation(fields: [submissionId], references: [id])
  questionId    String
  question     Questions  @relation(fields: [questionId], references: [id])
  answerText    String?
  answerChoices  String[]
}
