generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Users {
  id                String        @id @default(uuid()) @map("_id")
  name              String
  email             String        @unique
  emailVerified     DateTime?
  image             String?
  accounts          Accounts[]
  password          String
  forms             Forms[]
  submissions       Submissions[]
  createdAt         DateTime      @default(now())
  hasCompletedSetup Boolean       @default(false)
}

model Accounts {
  id                String @id @default(uuid()) @map("_id")
  userId            String
  user              Users  @relation(fields: [userId], references: [id])
  provider          String
  providerAccountId String
}

model RefreshTokens {
  id      String   @id @default(uuid()) @map("_id")
  userId  String   @unique
  token   String
  expires DateTime
}

model VerificationTokens {
  id      String   @id @default(uuid()) @map("_id")
  userId  String
  token   String   @unique
  expires DateTime
}

model Forms {
  id          String        @id @default(uuid()) @map("_id")
  userId      String
  user        Users         @relation(fields: [userId], references: [id])
  key         String        @unique
  title       String
  ogImage     String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  submissions Submissions[]
  questions   Questions[]
}

model Questions {
  id       String    @id @default(uuid()) @map("_id")
  formId   String
  form     Forms     @relation(fields: [formId], references: [id])
  label    String
  index    Int
  required Boolean
  type     QuestionTypes
  options  Options[]
  Answers  Answers[]
  maxCharacters Int?
}

model Options {
  id         String    @id @default(uuid()) @map("_id")
  questionId String
  question   Questions @relation(fields: [questionId], references: [id])
  index      Int
  value      String 
  src        String?
}

model Submissions {
  id        String    @id @default(uuid()) @map("_id")
  formId    String
  form      Forms     @relation(fields: [formId], references: [id])
  userId    String
  user      Users     @relation(fields: [userId], references: [id])
  createdAt DateTime  @default(now())
  answers   Answers[]
}

model Answers {
  id           String      @id @default(uuid()) @map("_id")
  submissionId String
  submission   Submissions @relation(fields: [submissionId], references: [id])
  questionId   String
  question     Questions   @relation(fields: [questionId], references: [id])
  type         String
  value        String
  src          String?
}



enum QuestionTypes {
  SHORT_TEXT
  LONG_TEXT
  MULTIPLE_CHOICE
  PICTURE_CHOICE
}